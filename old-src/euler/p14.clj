;;14. Which starting number, under one million, produces the longest chain?
  
;;if don't have recorded then recurse with node added to stack and the next step

(ns euler.p14)

;; TODO: Generalise to higher order (pass in step fn to use). Will
;; need to lose the global ref (closures? trees? heaps?)

(def *chains* {1 '(1)})

(defn p14-chain-step [x]
  (if (even? x)
    (/ x 2)
    (inc (* 3 x))))

(defn record-new-chains [sub-chain new-nodes]
  "Store all new chains that can be generated by adding new-nodes to existing sub-chain and return the longest"
  (cond (empty? new-nodes) sub-chain
        :else (reduce #(let [next-chain (cons %2 %)]
                         (def *chains* (assoc *chains* %2 next-chain))
                         next-chain)
                      sub-chain
                      new-nodes)))

(defn chain [x]
  (loop [node x, new-nodes ()]
    (cond
     (contains? *chains* node) (record-new-chains (get *chains* node) new-nodes)
     :else (let [next-node (p14-chain-step node)]
             (recur next-node (conj new-nodes node))))))

(defn longest-chain-to [x]
  (reduce #(if (> (second %2) (second %)) %2 %)
          [0 0]
          (map #(vector (first %) (count (second %)))
               (for [y (range 1 x)] [y (chain y)]))))

